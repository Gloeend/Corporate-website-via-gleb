<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string|null $username
 * @property string|null $password
 * @property int|null $age
 *
 * @property Order[] $orders
 * @property UserFio[] $userFios
 * @property UserNews[] $userNews
 * @property UserRole[] $userRoles
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    /**
     * @var mixed|null
     */
    private $authKey;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['age', 'username', 'password'], 'required'],
            [['age'], 'integer', 'min' => 18, 'max' => 99],
            [['username'], 'unique'],
            [['username'], 'string', 'max' => 31],
            [['password'], 'string', 'max' => 63],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Логин',
            'password' => 'Пароль',
            'age' => 'Возраст',
        ];
    }

    /**
     * Gets query for [[Orders]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getOrders()
    {
        return $this->hasMany(Order::className(), ['id_user' => 'id']);
    }

    /**
     * Gets query for [[UserFios]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserFios()
    {
        return $this->hasMany(UserFio::className(), ['id_user' => 'id']);
    }

    /**
     * Gets query for [[UserNews]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserNews()
    {
        return $this->hasMany(UserNews::className(), ['id_user' => 'id']);
    }

    /**
     * Gets query for [[UserRoles]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserRoles()
    {
        return $this->hasMany(UserRole::className(), ['id_user' => 'id']);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return User::findOne($id);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null;
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername(string $username)
    {
        return User::findOne(['username' => $username]);
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->authKey;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey): ?bool
    {
        return $this->authKey === $authKey;
    }

    // Возвращает название роли
    public function myRole()
    {
        return $this->getUserRoles()->one()->getRole()->one()->title;
    }

    // Генерация хеша пароля перед сохранением пользователя
    public function beforeSave($insert)
    {
        $this->password = Yii::$app->security->generatePasswordHash($this->password);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword(string $password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }
}
